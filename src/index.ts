import {
  Client,
  GatewayIntentBits,
  REST,
  Routes,
  SlashCommandBuilder,
  ChatInputCommandInteraction,
  AttachmentBuilder,
  EmbedBuilder,
  Attachment,
} from 'discord.js';
import { Octokit } from '@octokit/rest';
import https from 'https';
import http from 'http';
import AdmZip from 'adm-zip';
import { saveUserToken, getUserToken, removeUserToken, hasUserToken, getUserData } from './userTokens.js';

interface ConnectionSettings {
  settings: {
    access_token?: string;
    expires_at?: string;
    oauth?: {
      credentials?: {
        access_token?: string;
      };
    };
  };
}

let githubConnectionSettings: ConnectionSettings | null = null;

async function getGitHubAccessToken(): Promise<string> {
  if (
    githubConnectionSettings &&
    githubConnectionSettings.settings.expires_at &&
    new Date(githubConnectionSettings.settings.expires_at).getTime() > Date.now()
  ) {
    return githubConnectionSettings.settings.access_token!;
  }

  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;
  const xReplitToken = process.env.REPL_IDENTITY
    ? 'repl ' + process.env.REPL_IDENTITY
    : process.env.WEB_REPL_RENEWAL
    ? 'depl ' + process.env.WEB_REPL_RENEWAL
    : null;

  if (!xReplitToken) {
    throw new Error('X_REPLIT_TOKEN not found for repl/depl');
  }

  const response = await fetch(
    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',
    {
      headers: {
        Accept: 'application/json',
        X_REPLIT_TOKEN: xReplitToken,
      },
    }
  );

  const data: any = await response.json();
  githubConnectionSettings = data.items?.[0];

  const accessToken =
    githubConnectionSettings?.settings?.access_token ||
    githubConnectionSettings?.settings?.oauth?.credentials?.access_token;

  if (!githubConnectionSettings || !accessToken) {
    throw new Error('GitHub not connected');
  }
  return accessToken;
}

function createDiscordClient(): Client {
  const client = new Client({
    intents: [
      GatewayIntentBits.Guilds,
    ],
  });
  return client;
}

async function getGitHubClient(): Promise<Octokit> {
  const accessToken = await getGitHubAccessToken();
  return new Octokit({ auth: accessToken });
}

async function getUserGitHubClient(discordUserId: string): Promise<Octokit | null> {
  const token = await getUserToken(discordUserId);
  if (!token) {
    return null;
  }
  return new Octokit({ auth: token });
}

async function verifyGitHubToken(token: string): Promise<{ valid: boolean; username?: string; error?: string }> {
  try {
    const octokit = new Octokit({ auth: token });
    const { data: user } = await octokit.users.getAuthenticated();
    return { valid: true, username: user.login };
  } catch (error: any) {
    return { valid: false, error: error.message };
  }
}

async function downloadFile(url: string): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;
    protocol
      .get(url, (response) => {
        if (response.statusCode !== 200) {
          reject(new Error(`Failed to download file: ${response.statusCode}`));
          return;
        }

        const chunks: Buffer[] = [];
        response.on('data', (chunk: Buffer) => chunks.push(chunk));
        response.on('end', () => resolve(Buffer.concat(chunks)));
        response.on('error', reject);
      })
      .on('error', reject);
  });
}

function isZipFile(filename: string): boolean {
  return filename.toLowerCase().endsWith('.zip');
}

async function ensureRepoHasContent(
  octokit: Octokit,
  owner: string,
  repo: string
): Promise<void> {
  try {
    await octokit.repos.getContent({
      owner,
      repo,
      path: '',
    });
  } catch (error: any) {
    if (error.status === 404) {
      const readmeContent = Buffer.from(
        '# ' + repo + '\n\nReposit√≥rio criado automaticamente pelo Discord Bot para armazenar uploads.'
      ).toString('base64');

      await octokit.repos.createOrUpdateFileContents({
        owner,
        repo,
        path: 'README.md',
        message: 'Inicializa√ß√£o do reposit√≥rio',
        content: readmeContent,
      });

      console.log(`üìù Reposit√≥rio inicializado com README.md`);
    }
  }
}

function createProgressBar(progress: number, total: number = 100): string {
  const barLength = 20;
  const filled = Math.round((progress / total) * barLength);
  const empty = barLength - filled;
  const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  const percentage = Math.round((progress / total) * 100);
  return `\`\`\`ansi\n\u001b[36;1m${bar}\u001b[0m ${percentage}%\n\`\`\``;
}

function normalizePath(path: string): string {
  let normalized = path
    .replace(/\\/g, '/')
    .replace(/^\/+/, '')
    .replace(/\/+/g, '/')
    .trim();
  
  const parts = normalized.split('/').filter(part => part !== '.' && part !== '..' && part !== '');
  
  return parts.join('/');
}

function findCommonPrefix(paths: string[]): string {
  if (paths.length === 0) return '';
  if (paths.length === 1) {
    const parts = paths[0].split('/');
    return parts.length > 1 ? parts[0] + '/' : '';
  }
  
  const sortedPaths = paths.slice().sort();
  const first = sortedPaths[0].split('/');
  const last = sortedPaths[sortedPaths.length - 1].split('/');
  
  let i = 0;
  while (i < first.length && i < last.length && first[i] === last[i]) {
    i++;
  }
  
  return i > 0 && first[0] === last[0] ? first.slice(0, i).join('/') + '/' : '';
}

async function uploadZipContentsToGitHub(
  octokit: Octokit,
  owner: string,
  repo: string,
  folderPath: string,
  zipBuffer: Buffer,
  authorTag: string,
  progressCallback?: (current: number, total: number, fileName: string) => Promise<void>
): Promise<{ totalFiles: number; uploadedFiles: number; failedFiles: string[] }> {
  const zip = new AdmZip(zipBuffer);
  let zipEntries = zip.getEntries().filter(entry => {
    if (entry.isDirectory) return false;
    
    const name = entry.entryName.toLowerCase();
    
    if (name.startsWith('__macosx/') || name.includes('/__macosx/')) return false;
    if (name.startsWith('.git/') || name.includes('/.git/')) return false;
    if (name.startsWith('.ds_store') || name.includes('/.ds_store')) return false;
    if (name === 'thumbs.db' || name.endsWith('/thumbs.db')) return false;
    
    return true;
  });

  const commonPrefix = findCommonPrefix(zipEntries.map(e => e.entryName));

  const totalFiles = zipEntries.length;
  let uploadedFiles = 0;
  const failedFiles: string[] = [];

  await ensureRepoHasContent(octokit, owner, repo);

  const BATCH_SIZE = 5;
  let lastProgressUpdate = Date.now();
  const PROGRESS_THROTTLE_MS = 1000;
  
  for (let i = 0; i < zipEntries.length; i += BATCH_SIZE) {
    const batch = zipEntries.slice(i, i + BATCH_SIZE);
    
    await Promise.all(
      batch.map(async (entry) => {
        try {
          let fileName = entry.entryName;
          
          const pathSegments = fileName.split('/');
          const hasTraversal = pathSegments.some(segment => segment === '..');
          
          if (hasTraversal || fileName.startsWith('/') || fileName.includes('\\')) {
            console.warn(`‚ö†Ô∏è  Ignorando arquivo com caminho suspeito: ${entry.entryName}`);
            failedFiles.push(`${entry.entryName} (caminho suspeito)`);
            return;
          }
          
          if (commonPrefix && fileName.startsWith(commonPrefix)) {
            fileName = fileName.substring(commonPrefix.length);
          }
          
          fileName = normalizePath(fileName);
          
          if (!fileName) {
            console.warn(`‚ö†Ô∏è  Ignorando arquivo com caminho vazio ap√≥s normaliza√ß√£o: ${entry.entryName}`);
            failedFiles.push(`${entry.entryName} (caminho vazio)`);
            return;
          }
          
          const fileContent = entry.getData();
          const contentBase64 = fileContent.toString('base64');

          const filepath = normalizePath(folderPath ? `${folderPath}/${fileName}` : fileName);

          let sha: string | undefined;
          try {
            const { data: existingFile } = await octokit.repos.getContent({
              owner,
              repo,
              path: filepath,
            });

            if (!Array.isArray(existingFile) && 'sha' in existingFile) {
              sha = existingFile.sha;
            }
          } catch (error: any) {
            if (error.status !== 404) throw error;
          }

          await octokit.repos.createOrUpdateFileContents({
            owner,
            repo,
            path: filepath,
            message: `Upload: ${fileName} (enviado por ${authorTag})`,
            content: contentBase64,
            sha,
          });

          uploadedFiles++;
          
          if (progressCallback) {
            const now = Date.now();
            if (now - lastProgressUpdate >= PROGRESS_THROTTLE_MS) {
              await progressCallback(uploadedFiles, totalFiles, fileName);
              lastProgressUpdate = now;
            }
          }
        } catch (error: any) {
          console.error(`‚ùå Erro ao fazer upload de ${entry.entryName}:`, error.message);
          failedFiles.push(`${entry.entryName} (${error.message})`);
        }
      })
    );
  }

  if (progressCallback && totalFiles > 0 && uploadedFiles === totalFiles) {
    await progressCallback(uploadedFiles, totalFiles, 'Conclu√≠do');
  }

  return { totalFiles, uploadedFiles, failedFiles };
}

async function handleZipUpload(
  interaction: ChatInputCommandInteraction,
  attachment: Attachment,
  octokit: Octokit,
  githubUsername: string,
  repoName: string,
  folderPath: string = ''
): Promise<void> {
  const destinoDisplay = folderPath 
    ? `${githubUsername}/${repoName}/${folderPath}` 
    : `${githubUsername}/${repoName} (raiz)`;

  await interaction.editReply(
    `üì§ **Iniciando extra√ß√£o e upload...**\n\n` +
    `üì¶ Arquivo ZIP: \`${attachment.name}\`\n` +
    `üìÅ Destino: \`${destinoDisplay}\`\n\n` +
    `üîÑ Progresso:\n${createProgressBar(0)}\n` +
    `‚è≥ Preparando...`
  );

  try {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    await interaction.editReply(
      `üì§ **Extraindo e enviando arquivos...**\n\n` +
      `üì¶ Arquivo ZIP: \`${attachment.name}\`\n` +
      `üìÅ Destino: \`${destinoDisplay}\`\n\n` +
      `üîÑ Progresso:\n${createProgressBar(10)}\n` +
      `üì• Baixando arquivo ZIP...`
    );

    console.log(`üì• Baixando arquivo: ${attachment.name}`);
    const fileContent = await downloadFile(attachment.url);
    const fileSize = fileContent.length;

    const fileSizeStr = fileSize < 1024 * 1024 
      ? `${(fileSize / 1024).toFixed(2)} KB`
      : `${(fileSize / 1024 / 1024).toFixed(2)} MB`;

    await interaction.editReply(
      `üì§ **Extraindo e enviando arquivos...**\n\n` +
      `üì¶ Arquivo ZIP: \`${attachment.name}\` (${fileSizeStr})\n` +
      `üìÅ Destino: \`${destinoDisplay}\`\n\n` +
      `üîÑ Progresso:\n${createProgressBar(20)}\n` +
      `üìÇ Extraindo conte√∫do do ZIP...`
    );

    console.log(`üìÇ Extraindo conte√∫do do ZIP e fazendo upload para GitHub...`);
    
    const uploadResult = await uploadZipContentsToGitHub(
      octokit,
      githubUsername,
      repoName,
      folderPath,
      fileContent,
      interaction.user.tag,
      async (current, total, fileName) => {
        const progress = 20 + Math.round((current / total) * 70);
        await interaction.editReply(
          `üì§ **Enviando arquivos para o GitHub** ‚ö°\n\n` +
          `üì¶ Arquivo ZIP: \`${attachment.name}\` (${fileSizeStr})\n` +
          `üìÅ Destino: \`${destinoDisplay}\`\n\n` +
          `üìÑ Enviando: \`${fileName}\`\n` +
          `üîÑ Progresso: ${current}/${total} arquivos\n${createProgressBar(progress)}\n` +
          `‚ö° Upload paralelo (5 arquivos por vez)...`
        );
      }
    );

    const locationDisplay = folderPath 
      ? `\`${folderPath}\`` 
      : '`/ (raiz)`';

    const githubLink = folderPath
      ? `https://github.com/${githubUsername}/${repoName}/tree/main/${folderPath}`
      : `https://github.com/${githubUsername}/${repoName}`;

    let resultMessage = `‚úÖ **Upload conclu√≠do!**\n\n` +
      `üì¶ Arquivo ZIP: \`${attachment.name}\` (${fileSizeStr})\n` +
      `üìÅ Reposit√≥rio: \`${githubUsername}/${repoName}\`\n` +
      `üìÇ Localiza√ß√£o: ${locationDisplay}\n\n` +
      `üìä Resultado:\n` +
      `‚úÖ Arquivos enviados: ${uploadResult.uploadedFiles}/${uploadResult.totalFiles}\n`;

    if (uploadResult.failedFiles.length > 0) {
      resultMessage += `‚ö†Ô∏è  Arquivos com erro: ${uploadResult.failedFiles.length}\n`;
      if (uploadResult.failedFiles.length <= 5) {
        resultMessage += `\n**Arquivos que falharam:**\n`;
        uploadResult.failedFiles.forEach((file: string) => {
          resultMessage += `‚Ä¢ \`${file}\`\n`;
        });
      }
    }

    resultMessage += `\nüîÑ Progresso:\n${createProgressBar(100)}\n` +
      `‚úÖ Completo!\n\n` +
      `üîó **Ver no GitHub**: ${githubLink}`;

    await interaction.editReply(resultMessage);

    console.log(`‚úÖ Upload conclu√≠do: ${uploadResult.uploadedFiles}/${uploadResult.totalFiles} arquivos`);
  } catch (error: any) {
    console.error('‚ùå Erro no upload:', error);

    let errorMessage = '\n\n';

    if (error.message.includes('Not Found')) {
      errorMessage += `‚ö†Ô∏è  O reposit√≥rio \`${githubUsername}/${repoName}\` n√£o existe.\n\n`;
      errorMessage += `üìù **Como criar o reposit√≥rio:**\n`;
      errorMessage += `1. Acesse: https://github.com/new\n`;
      errorMessage += `2. Nome do reposit√≥rio: \`${repoName}\`\n`;
      errorMessage += `3. Clique em "Create repository"\n`;
      errorMessage += `4. Tente enviar o arquivo novamente`;
    } else {
      errorMessage += `\`\`\`${error.message}\`\`\``;
    }

    await interaction.editReply(
      `‚ùå **Erro no upload!**\n\n` +
      `üì¶ Arquivo: \`${attachment.name}\`\n\n` +
      `üîÑ Progresso:\n${createProgressBar(0)}\n` +
      `‚ùå Falhou` +
      errorMessage
    );
  }
}

// Registrar comandos slash
async function registerCommands(clientId: string, token: string): Promise<void> {
  const commands = [
    new SlashCommandBuilder()
      .setName('login')
      .setDescription('Fazer login com seu token GitHub')
      .addStringOption(option =>
        option.setName('token')
          .setDescription('Seu Personal Access Token do GitHub')
          .setRequired(true)
      ),
    
    new SlashCommandBuilder()
      .setName('logout')
      .setDescription('Fazer logout e remover seu token'),
    
    new SlashCommandBuilder()
      .setName('whoami')
      .setDescription('Ver informa√ß√µes da sua conta GitHub'),
    
    new SlashCommandBuilder()
      .setName('repos')
      .setDescription('Listar seus reposit√≥rios do GitHub (10 mais recentes)'),
    
    new SlashCommandBuilder()
      .setName('upload')
      .setDescription('Fazer upload de arquivo ZIP para seu reposit√≥rio GitHub')
      .addStringOption(option =>
        option.setName('repositorio')
          .setDescription('Nome do reposit√≥rio (ex: meu-projeto)')
          .setRequired(true)
      )
      .addAttachmentOption(option =>
        option.setName('arquivo')
          .setDescription('Arquivo ZIP para upload')
          .setRequired(true)
      )
      .addStringOption(option =>
        option.setName('pasta')
          .setDescription('Pasta de destino (opcional, deixe vazio para raiz)')
          .setRequired(false)
      ),
    
    new SlashCommandBuilder()
      .setName('help')
      .setDescription('Mostra ajuda e comandos dispon√≠veis'),
  ].map(command => command.toJSON());

  const rest = new REST({ version: '10' }).setToken(token);

  try {
    console.log('üîÑ Registrando slash commands...');
    
    await rest.put(
      Routes.applicationCommands(clientId),
      { body: commands },
    );

    console.log('‚úÖ Slash commands registrados com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao registrar slash commands:', error);
  }
}

async function startBot(): Promise<void> {
  console.log('ü§ñ Iniciando bot do Discord com Slash Commands...');

  const token = process.env.DISCORD_BOT_TOKEN;
  
  if (!token) {
    throw new Error('DISCORD_BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente');
  }

  const client = createDiscordClient();

  const isReplit = process.env.REPLIT_CONNECTORS_HOSTNAME && 
                   (process.env.REPL_IDENTITY || process.env.WEB_REPL_RENEWAL);

  if (isReplit) {
    try {
      const octokit = await getGitHubClient();
      const { data: user } = await octokit.users.getAuthenticated();
      const githubUsername = user.login;
      console.log(`‚úÖ Conectado ao GitHub como: ${githubUsername}`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Integra√ß√£o GitHub do Replit n√£o dispon√≠vel');
      console.log('‚úÖ Modo: Autentica√ß√£o individual por usu√°rio');
    }
  } else {
    console.log('‚úÖ Modo: Autentica√ß√£o individual por usu√°rio');
  }

  client.once('ready', async () => {
    console.log(`‚úÖ Bot conectado como ${client.user?.tag}`);
    
    if (client.user) {
      await registerCommands(client.user.id, token);
    }
    
    console.log('üì® Aguardando comandos slash...');
    console.log('\nüí° Comandos dispon√≠veis (use / no Discord):');
    console.log('   /login - Fazer login com token GitHub');
    console.log('   /logout - Fazer logout');
    console.log('   /whoami - Ver informa√ß√µes da conta');
    console.log('   /repos - Listar reposit√≥rios');
    console.log('   /upload - Upload de arquivo ZIP');
    console.log('   /help - Mostra ajuda completa');
    console.log(`\nüîê Modo: Autentica√ß√£o individual por usu√°rio`);
    console.log(`üìù Cada usu√°rio deve usar /login com seu pr√≥prio token GitHub\n`);
  });

  client.on('interactionCreate', async (interaction) => {
    if (!interaction.isChatInputCommand()) return;

    try {
      switch (interaction.commandName) {
        case 'login':
          await handleLoginCommand(interaction);
          break;
        case 'logout':
          await handleLogoutCommand(interaction);
          break;
        case 'whoami':
          await handleWhoAmICommand(interaction);
          break;
        case 'repos':
          await handleReposCommand(interaction);
          break;
        case 'upload':
          await handleUploadCommand(interaction);
          break;
        case 'help':
          await handleHelpCommand(interaction);
          break;
      }
    } catch (error: any) {
      console.error('‚ùå Erro ao processar comando:', error);
      const errorMessage = `‚ùå **Erro ao processar comando**\n\n\`\`\`${error.message}\`\`\``;
      
      if (interaction.deferred || interaction.replied) {
        await interaction.editReply(errorMessage);
      } else {
        await interaction.reply({ content: errorMessage, ephemeral: true });
      }
    }
  });

  client.on('error', (error: Error) => {
    console.error('‚ùå Erro no Discord:', error);
  });

  console.log('üîå Conectando ao Discord...');
  await client.login(token);
}

// Handlers de comandos slash
async function handleLoginCommand(interaction: ChatInputCommandInteraction): Promise<void> {
  const token = interaction.options.getString('token', true);
  
  await interaction.deferReply({ ephemeral: true });

  const verification = await verifyGitHubToken(token);
  
  if (!verification.valid) {
    await interaction.editReply(
      `‚ùå **Token inv√°lido!**\n\n` +
      `O token fornecido n√£o √© v√°lido ou n√£o tem as permiss√µes necess√°rias.\n\n` +
      `Erro: \`${verification.error}\``
    );
    return;
  }

  try {
    await saveUserToken(interaction.user.id, token, verification.username);
    
    await interaction.editReply(
      `‚úÖ **Login realizado com sucesso!**\n\n` +
      `üë§ Usu√°rio GitHub: \`${verification.username}\`\n` +
      `üéâ Agora voc√™ pode usar \`/upload\` para fazer upload nos seus reposit√≥rios!\n\n` +
      `üí° Use \`/repos\` para ver seus reposit√≥rios`
    );
    
    console.log(`‚úÖ Usu√°rio ${interaction.user.tag} autenticou como ${verification.username}`);
  } catch (error: any) {
    await interaction.editReply(`‚ùå Erro ao salvar token: \`${error.message}\``);
  }
}

async function handleLogoutCommand(interaction: ChatInputCommandInteraction): Promise<void> {
  await interaction.deferReply({ ephemeral: true });
  
  const hasToken = await hasUserToken(interaction.user.id);
  
  if (!hasToken) {
    await interaction.editReply(
      `‚ùå Voc√™ n√£o est√° autenticado!\n\n` +
      `Use \`/login\` para fazer login.`
    );
    return;
  }

  const removed = await removeUserToken(interaction.user.id);
  
  if (removed) {
    await interaction.editReply(
      `‚úÖ **Logout realizado com sucesso!**\n\n` +
      `Seu token foi removido do sistema.\n` +
      `Use \`/login\` para fazer login novamente.`
    );
    console.log(`‚úÖ Usu√°rio ${interaction.user.tag} fez logout`);
  } else {
    await interaction.editReply(`‚ùå Erro ao remover token.`);
  }
}

async function handleWhoAmICommand(interaction: ChatInputCommandInteraction): Promise<void> {
  await interaction.deferReply({ ephemeral: true });
  
  const userData = await getUserData(interaction.user.id);
  
  if (!userData) {
    await interaction.editReply(
      `‚ùå Voc√™ n√£o est√° autenticado!\n\n` +
      `Use \`/login\` para fazer login.`
    );
    return;
  }

  const registeredDate = new Date(userData.registeredAt).toLocaleString('pt-BR');
  
  await interaction.editReply(
    `üë§ **Informa√ß√µes da sua conta**\n\n` +
    `üêô GitHub: \`${userData.githubUsername || 'N√£o dispon√≠vel'}\`\n` +
    `üìÖ Registrado em: ${registeredDate}\n` +
    `üí¨ Discord: ${interaction.user.tag}`
  );
}

async function handleReposCommand(interaction: ChatInputCommandInteraction): Promise<void> {
  await interaction.deferReply();
  
  const octokit = await getUserGitHubClient(interaction.user.id);
  
  if (!octokit) {
    await interaction.editReply(
      `‚ùå Voc√™ n√£o est√° autenticado!\n\n` +
      `Use \`/login\` para fazer login.`
    );
    return;
  }

  try {
    const { data: user } = await octokit.users.getAuthenticated();
    const { data: repos } = await octokit.repos.listForAuthenticatedUser({
      sort: 'updated',
      per_page: 10,
    });

    if (repos.length === 0) {
      await interaction.editReply(
        `üìö **Seus Reposit√≥rios**\n\n` +
        `Voc√™ ainda n√£o tem reposit√≥rios.\n` +
        `Crie um em: https://github.com/new`
      );
      return;
    }

    const repoList = repos
      .map((repo: any, index: number) => {
        const privacy = repo.private ? 'üîí' : 'üåê';
        return `${index + 1}. ${privacy} **${repo.name}**\n   ${repo.html_url}`;
      })
      .join('\n\n');

    await interaction.editReply(
      `üìö **Seus Reposit√≥rios** (10 mais recentes)\n\n` +
      `üë§ Usu√°rio: \`${user.login}\`\n\n` +
      `${repoList}\n\n` +
      `üí° Use \`/upload\` em qualquer destes reposit√≥rios!`
    );
  } catch (error: any) {
    await interaction.editReply(
      `‚ùå **Erro ao buscar reposit√≥rios**\n\n` +
      `\`\`\`${error.message}\`\`\``
    );
  }
}

async function handleUploadCommand(interaction: ChatInputCommandInteraction): Promise<void> {
  await interaction.deferReply();
  
  const octokit = await getUserGitHubClient(interaction.user.id);
  
  if (!octokit) {
    await interaction.editReply(
      `‚ùå **Voc√™ n√£o est√° autenticado!**\n\n` +
      `Use \`/login\` para fazer login primeiro.\n\n` +
      `üìù **Como obter um token**:\n` +
      `1. Acesse: https://github.com/settings/tokens\n` +
      `2. Gere um novo token com permiss√£o \`repo\`\n` +
      `3. Use: \`/login\``
    );
    return;
  }

  const repoName = interaction.options.getString('repositorio', true);
  const folderPath = interaction.options.getString('pasta') || '';
  const attachment = interaction.options.getAttachment('arquivo', true);

  if (!isZipFile(attachment.name!)) {
    await interaction.editReply(
      '‚ùå **Erro**: O arquivo deve ser um ZIP!\n\n' +
      `üí° Apenas arquivos com extens√£o \`.zip\` s√£o aceitos.`
    );
    return;
  }

  try {
    const { data: user } = await octokit.users.getAuthenticated();
    const githubUsername = user.login;

    await handleZipUpload(
      interaction,
      attachment,
      octokit,
      githubUsername,
      repoName,
      folderPath
    );
  } catch (error: any) {
    await interaction.editReply(
      `‚ùå **Erro ao obter informa√ß√µes do usu√°rio**\n\n` +
      `\`\`\`${error.message}\`\`\`\n\n` +
      `Seu token pode estar inv√°lido. Use \`/logout\` e \`/login\` novamente.`
    );
  }
}

async function handleHelpCommand(interaction: ChatInputCommandInteraction): Promise<void> {
  await interaction.deferReply({ ephemeral: true });
  
  const isAuthenticated = await hasUserToken(interaction.user.id);
  const userData = isAuthenticated ? await getUserData(interaction.user.id) : null;
  
  let authStatus = '';
  if (isAuthenticated && userData) {
    authStatus = `\n‚úÖ **Status**: Autenticado como \`${userData.githubUsername}\`\n`;
  } else {
    authStatus = `\n‚ùå **Status**: N√£o autenticado - Use \`/login\` primeiro\n`;
  }
  
  const helpMessage = 
    `üìö **Discord GitHub Bot - Comandos Dispon√≠veis**\n` +
    `‚ö° **Tecnologia**: Slash Commands (comandos de barra /)\n` +
    authStatus +
    `\n**Autentica√ß√£o:**\n` +
    `‚Ä¢ \`/login\` - Fazer login com seu token GitHub\n` +
    `‚Ä¢ \`/logout\` - Fazer logout e remover seu token\n` +
    `‚Ä¢ \`/whoami\` - Ver informa√ß√µes da sua conta\n\n` +
    `**Reposit√≥rios:**\n` +
    `‚Ä¢ \`/repos\` - Listar seus reposit√≥rios\n` +
    `‚Ä¢ \`/upload\` - Upload de ZIP extra√≠do para reposit√≥rio\n` +
    `  üìÇ Par√¢metros:\n` +
    `     ‚Ä¢ repositorio: nome do seu repo (ex: meu-projeto)\n` +
    `     ‚Ä¢ arquivo: arquivo ZIP para upload\n` +
    `     ‚Ä¢ pasta: pasta de destino (opcional)\n` +
    `  ‚ö° Arquivos existentes s√£o substitu√≠dos automaticamente\n` +
    `  ‚ö° Upload paralelo (5 arquivos por vez)\n\n` +
    `**Ajuda:**\n` +
    `‚Ä¢ \`/help\` - Mostra esta mensagem\n\n` +
    `üí° **Dica**: Comandos \`/login\` s√£o automaticamente privados (ephemeral)!`;

  await interaction.editReply(helpMessage);
}

startBot().catch((error: Error) => {
  console.error('‚ùå Erro fatal ao iniciar bot:', error);
  process.exit(1);
});
